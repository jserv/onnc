import jinja2
import bm_asm


def get_tg():
    tg = bm_asm.inst_group()
    cur_inst = tg.add_inst("bmnet_pooling_forward_bmkernel",
                           "pooling").add_ctx()
    cur_inst.add_param("ifmap_gaddr").set_type("gaddr_t")
    cur_inst.add_param("ofmap_gaddr").set_type("gaddr_t")
    cur_inst.add_param("index_gaddr").set_type("gaddr_t")
    cur_inst.add_param("o_findex_gaddr").set_type("gaddr_t")
    cur_inst.add_param("n").set_type("int")
    cur_inst.add_param("c").set_type("int")
    cur_inst.add_param("h").set_type("int")
    cur_inst.add_param("w").set_type("int")
    cur_inst.add_param("kh").set_type("int")
    cur_inst.add_param("kw").set_type("int")
    cur_inst.add_param("pad_h").set_type("int")
    cur_inst.add_param("pad_w").set_type("int")
    cur_inst.add_param("stride_h").set_type("int")
    cur_inst.add_param("stride_w").set_type("int")
    cur_inst.add_param("is_avg_pooling").set_type("int")
    cur_inst.add_param("avg_const").set_type("float").add_comment(
        "default(passing 0.0f) is 1/kh*kw")
    cur_inst.add_param("do_relu").set_type("int")
    
    cur_inst = tg.add_inst("bmnet_pooling_backward_bmkernel",
                           "pooling_b").add_ctx()
    cur_inst.add_param("ifmap_gaddr").set_type("gaddr_t")
    cur_inst.add_param("ofmap_gaddr").set_type("gaddr_t")
    cur_inst.add_param("index_gaddr").set_type("gaddr_t")
    cur_inst.add_param("o_findex_gaddr").set_type("gaddr_t")
    cur_inst.add_param("n").set_type("int")
    cur_inst.add_param("c").set_type("int")
    cur_inst.add_param("h").set_type("int")
    cur_inst.add_param("w").set_type("int")
    cur_inst.add_param("kh").set_type("int")
    cur_inst.add_param("kw").set_type("int")
    cur_inst.add_param("pad_h").set_type("int")
    cur_inst.add_param("pad_w").set_type("int")
    cur_inst.add_param("stride_h").set_type("int")
    cur_inst.add_param("stride_w").set_type("int")
    cur_inst.add_param("is_avg_pooling").set_type("int")
    cur_inst.add_param("avg_const").set_type("float").add_comment(
        "default(passing 0.0f) is 1/kh*kw")

    cur_inst = tg.add_inst("bmnet_conv_forward_bmkernel",
                           "conv").add_ctx()
    cur_inst.add_param("ga_ifmap").set_type("gaddr_t")
    cur_inst.add_param("ga_ofmap").set_type("gaddr_t")
    cur_inst.add_param("ga_weight").set_type("gaddr_t")
    cur_inst.add_param("ga_bias").set_type("gaddr_t")
    cur_inst.add_param("ga_bn_mean").set_type("gaddr_t")
    cur_inst.add_param("ga_bn_variance").set_type("gaddr_t")
    cur_inst.add_param("ga_scale").set_type("gaddr_t")
    cur_inst.add_param("ga_scale_bias").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")
    cur_inst.add_param("groups").set_type("int")
    cur_inst.add_param("output_c").set_type("int")
    cur_inst.add_param("kh").set_type("u16")
    cur_inst.add_param("kw").set_type("u16")
    cur_inst.add_param("dilation_h").set_type("u16")
    cur_inst.add_param("dilation_w").set_type("u16")
    cur_inst.add_param("pad_h").set_type("u8")
    cur_inst.add_param("pad_w").set_type("u8")
    cur_inst.add_param("stride_h").set_type("u8")
    cur_inst.add_param("stride_w").set_type("u8")
    cur_inst.add_param("result_add").set_type("int")
    cur_inst.add_param("do_bias").set_type("int")
    cur_inst.add_param("do_bn").set_type("int")
    cur_inst.add_param("do_scale").set_type("int")
    cur_inst.add_param("do_scale_bias").set_type("int")
    cur_inst.add_param("do_activation").set_type("int")
    cur_inst.add_param("bn_scale").set_type("float")
    cur_inst.add_param("bn_eps").set_type("float")
    cur_inst.add_param("activation_method").set_type("int")
    cur_inst.add_param("activation_arg").set_type("float").set_c_array(1)
    cur_inst.add_param("activation_ga_slope").set_type("gaddr_t")
    cur_inst.add_param("activation_channel_shared").set_type("bool")


    cur_inst = tg.add_inst("bmnet_threshold_forward_bmkernel", "bmnet_threshold_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_offset").set_type("gaddr_t")
    cur_inst.add_param("output_offset").set_type("gaddr_t")
    cur_inst.add_param("threshold").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_exp_forward_bmkernel", "bmnet_exp_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_offset").set_type("gaddr_t")
    cur_inst.add_param("output_offset").set_type("gaddr_t")
    cur_inst.add_param("base").set_type("float")
    cur_inst.add_param("input_scale").set_type("float")
    cur_inst.add_param("input_shift").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_power_forward_bmkernel", "bmnet_power_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_offset").set_type("gaddr_t")
    cur_inst.add_param("output_offset").set_type("gaddr_t")
    cur_inst.add_param("power_").set_type("float")
    cur_inst.add_param("scale_").set_type("float")
    cur_inst.add_param("shift_").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_absval_forward_bmkernel", "bmnet_absval_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_sigmoid_forward_bmkernel", "bmnet_sigmoid_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_log_forward_bmkernel", "bmnet_log_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("scale").set_type("float")
    cur_inst.add_param("shift").set_type("float")
    cur_inst.add_param("base").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_fc_forward_bmkernel", "bmnet_fc_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_data_gaddr").set_type("gaddr_t")
    cur_inst.add_param("weight_data_gaddr").set_type("gaddr_t")
    cur_inst.add_param("bias_data_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_data_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_row_num").set_type("int")
    cur_inst.add_param("input_col_num").set_type("int")
    cur_inst.add_param("weight_col_num").set_type("int")
    cur_inst.add_param("have_bias").set_type("int")
    cur_inst.add_param("using_relu").set_type("int")
    cur_inst.add_param("weight_transpose").set_type("bool")

    cur_inst = tg.add_inst("bmnet_bias_forward_bmkernel", "bmnet_bias_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_data_gaddr").set_type("gaddr_t")
    cur_inst.add_param("bias_data_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_data_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_elu_forward_bmkernel", "bmnet_elu_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("alpha").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_tanh_forward_bmkernel", "bmnet_tanh_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")

    cur_inst = tg.add_inst("bmnet_lstm_unit_forward_bmkernel", "bmnet_lstm_unit_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("X_i_offset").set_type("gaddr_t")
    cur_inst.add_param("X_f_offset").set_type("gaddr_t")
    cur_inst.add_param("X_o_offset").set_type("gaddr_t")
    cur_inst.add_param("X_g_offset").set_type("gaddr_t")
    cur_inst.add_param("C_prev_offset").set_type("gaddr_t")
    cur_inst.add_param("cont_expand_offset").set_type("gaddr_t")
    cur_inst.add_param("C_offset").set_type("gaddr_t")
    cur_inst.add_param("H_offset").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_lrn_forward_bmkernel", "bmnet_lrn_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")
    cur_inst.add_param("alpha").set_type("float")
    cur_inst.add_param("size").set_type("int")
    cur_inst.add_param("beta").set_type("float")
    cur_inst.add_param("k").set_type("float")

    cur_inst = tg.add_inst("bmnet_bnll_forward_bmkernel", "bmnet_bnll_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_filter_forward_bmkernel", "bmnet_filter_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("output_offset").set_type("gaddr_t")
    cur_inst.add_param("input_offset").set_type("gaddr_t")
    cur_inst.add_param("filter_offset").set_type("gaddr_t")
    cur_inst.add_param("arm_reserved_offset").set_type("gaddr_t")
    cur_inst.add_param("output_n").set_type("int")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("item_size").set_type("int")

    cur_inst = tg.add_inst("bmnet_crop_forward_bmkernel", "bmnet_crop_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("output_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_dim").set_type("int").set_c_array("output_dim_len")
    cur_inst.add_param("output_dim").set_type("int").set_c_array("output_dim_len")
    cur_inst.add_param("offsets").set_type("int").set_c_array("output_dim_len")
    cur_inst.add_param("output_dim_len").set_type("int")

    cur_inst = tg.add_inst("bmnet_slice_forward_bmkernel", "bmnet_slice_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("outer_dim").set_type("int")
    cur_inst.add_param("inner_dim").set_type("int")
    cur_inst.add_param("input_slice_dim").set_type("int")
    cur_inst.add_param("input_slice_offset").set_type("int")
    cur_inst.add_param("output_slice_dim").set_type("int")

    cur_inst = tg.add_inst("bmnet_eltwise_forward_bmkernel", "bmnet_eltwise_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("ga_input").set_type("gaddr_t").set_c_array("input_size")
    cur_inst.add_param("ga_output").set_type("gaddr_t")
    cur_inst.add_param("input_size").set_type("int")
    cur_inst.add_param("op").set_type("int")
    cur_inst.add_param("coeffs").set_type("float").set_c_array("input_size")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")
    cur_inst.add_param("do_relu").set_type("bool")
    cur_inst.add_param("relu_slope").set_type("float")

    cur_inst = tg.add_inst("bmnet_tile_forward_bmkernel", "bmnet_tile_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("outer_dim").set_type("int")
    cur_inst.add_param("inner_dim").set_type("int")
    cur_inst.add_param("tiles").set_type("int")

    cur_inst = tg.add_inst("bmnet_relu_forward_compact_bmkernel", "bmnet_relu_forward_compact_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("relu_gaddr").set_type("gaddr_t")
    cur_inst.add_param("negative_slope").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_relu_forward_bmkernel", "bmnet_relu_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("negative_slope").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_dropout_forward_bmkernel", "bmnet_dropout_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("mask_gaddr").set_type("gaddr_t")
    cur_inst.add_param("rand_table_gaddr").set_type("gaddr_t")
    cur_inst.add_param("rand_table_offset").set_type("int")
    cur_inst.add_param("dropout_ratio").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_dim").set_type("int")

    cur_inst = tg.add_inst("bmnet_batchnorm_forward_inference_bmkernel", "bmnet_batchnorm_forward_inference_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("mean_ma_gaddr").set_type("gaddr_t")
    cur_inst.add_param("variance_ma_gaddr").set_type("gaddr_t")
    cur_inst.add_param("scale_ma").set_type("float")
    cur_inst.add_param("variance_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("eps").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_softmax_forward_bmkernel", "bmnet_softmax_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_scale_forward_bmkernel", "bmnet_scale_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("scale_gaddr").set_type("gaddr_t")
    cur_inst.add_param("bias_gaddr").set_type("gaddr_t")
    cur_inst.add_param("output_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")
    cur_inst.add_param("scale_dim").set_type("int")
    cur_inst.add_param("inner_dim").set_type("int")

    cur_inst = tg.add_inst("bmnet_mvn_forward_bmkernel", "bmnet_mvn_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("mean_offset").set_type("gaddr_t")
    cur_inst.add_param("temp_offset").set_type("gaddr_t")
    cur_inst.add_param("input_offset").set_type("gaddr_t")
    cur_inst.add_param("variance_offset").set_type("gaddr_t")
    cur_inst.add_param("output_offset").set_type("gaddr_t")
    cur_inst.add_param("normalize_variance").set_type("int")
    cur_inst.add_param("eps_").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_reduction_forward_bmkernel", "bmnet_reduction_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_offset").set_type("gaddr_t")
    cur_inst.add_param("output_offset").set_type("gaddr_t")
    cur_inst.add_param("op_").set_type("int")
    cur_inst.add_param("coeff_").set_type("float")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")

    cur_inst = tg.add_inst("bmnet_prelu_forward_bmkernel", "bmnet_prelu_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("slope_gaddr").set_type("gaddr_t")
    cur_inst.add_param("output_gaddr").set_type("gaddr_t")
    # cur_inst.add_param("arm_reserved_gaddr").set_type("gaddr_t")
    cur_inst.add_param("channel_shared").set_type("int")
    cur_inst.add_param("slope").set_type("float")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_lstm_forward_bmkernel", "bmnet_lstm_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("cont_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_static_gaddr").set_type("gaddr_t")
    cur_inst.add_param("w_hc_gaddr").set_type("gaddr_t")
    cur_inst.add_param("w_xc_gaddr").set_type("gaddr_t")
    cur_inst.add_param("w_static_gaddr").set_type("gaddr_t")
    cur_inst.add_param("b_c_gaddr").set_type("gaddr_t")
    cur_inst.add_param("h_0_gaddr").set_type("gaddr_t")
    cur_inst.add_param("c_0_gaddr").set_type("gaddr_t")
    cur_inst.add_param("c_gaddr").set_type("gaddr_t")
    cur_inst.add_param("gate_gaddr").set_type("gaddr_t")
    cur_inst.add_param("h_T_gaddr").set_type("gaddr_t")
    cur_inst.add_param("c_T_gaddr").set_type("gaddr_t")
    cur_inst.add_param("h_gaddr").set_type("gaddr_t")
    cur_inst.add_param("arm_reserved_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("seq_len").set_type("int")
    cur_inst.add_param("input_dim").set_type("int")
    cur_inst.add_param("input_static_dim").set_type("int")
    cur_inst.add_param("output_dim").set_type("int")
    cur_inst.add_param("with_input_static").set_type("int")

    cur_inst = tg.add_inst("bmnet_embed_forward_bmkernel", "bmnet_embed_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("weight_gaddr").set_type("gaddr_t")
    cur_inst.add_param("bias_gaddr").set_type("gaddr_t")
    cur_inst.add_param("output_gaddr").set_type("gaddr_t")
    cur_inst.add_param("arm_reserved_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_dim").set_type("int")
    cur_inst.add_param("output_dim").set_type("int")
    cur_inst.add_param("with_bias").set_type("int")

    cur_inst = tg.add_inst("bmnet_rnn_forward_bmkernel", "bmnet_rnn_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("cont_gaddr").set_type("gaddr_t")
    cur_inst.add_param("static_gaddr").set_type("gaddr_t")
    cur_inst.add_param("w_hh_gaddr").set_type("gaddr_t")
    cur_inst.add_param("w_xh_gaddr").set_type("gaddr_t")
    cur_inst.add_param("w_ho_gaddr").set_type("gaddr_t")
    cur_inst.add_param("w_st_gaddr").set_type("gaddr_t")
    cur_inst.add_param("b_h_gaddr").set_type("gaddr_t")
    cur_inst.add_param("b_o_gaddr").set_type("gaddr_t")
    cur_inst.add_param("h_0_gaddr").set_type("gaddr_t")
    cur_inst.add_param("h_gaddr").set_type("gaddr_t")
    cur_inst.add_param("h_T_gaddr").set_type("gaddr_t")
    cur_inst.add_param("o_gaddr").set_type("gaddr_t")
    cur_inst.add_param("arm_reserved_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("seq_len").set_type("int")
    cur_inst.add_param("input_dim").set_type("int")
    cur_inst.add_param("static_dim").set_type("int")
    cur_inst.add_param("output_dim").set_type("int")
    cur_inst.add_param("with_static").set_type("int")

    cur_inst = tg.add_inst("bmnet_split_forward_bmkernel", "bmnet_split_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("bottom_gaddr").set_type("gaddr_t")
    cur_inst.add_param("top_gaddr").set_type("gaddr_t").set_c_array("top_size")
    cur_inst.add_param("top_size").set_type("int")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_concat_forward_bmkernel", "bmnet_concat_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddrs").set_type("gaddr_t").set_c_array("input_num")
    cur_inst.add_param("output_gaddrs").set_type("gaddr_t").set_c_array("input_num")
    cur_inst.add_param("input_dims").set_type("int").set_c_array("input_num")
    cur_inst.add_param("input_num").set_type("int")
    cur_inst.add_param("output_dim_len").set_type("int")
    cur_inst.add_param("output_dim").set_type("int").set_c_array("output_dim_len")

    cur_inst = tg.add_inst("bmnet_upsample_bmkernel", "bmnet_upsample_bmkernel_short").add_ctx()
    cur_inst.add_param("ga_ifmap").set_type("gaddr_t")
    cur_inst.add_param("ga_ofmap").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")
    cur_inst.add_param("size").set_type("int")

    cur_inst = tg.add_inst("bmnet_reshape_forward_bmkernel", "bmnet_reshape_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("output_gaddr").set_type("gaddr_t")
    cur_inst.add_param("output_dim_len").set_type("int")
    cur_inst.add_param("output_dim").set_type("int").set_c_array("output_dim_len")

    cur_inst = tg.add_inst("bmnet_permute_forward_bmkernel", "bmnet_permute_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("output_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")
    cur_inst.add_param("output_n").set_type("int")
    cur_inst.add_param("output_c").set_type("int")
    cur_inst.add_param("output_h").set_type("int")
    cur_inst.add_param("output_w").set_type("int")
    cur_inst.add_param("order_n").set_type("int")
    cur_inst.add_param("order_c").set_type("int")
    cur_inst.add_param("order_h").set_type("int")
    cur_inst.add_param("order_w").set_type("int")
    cur_inst.add_param("need_permute_").set_type("bool")

    cur_inst = tg.add_inst("bmnet_flatten_forward_bmkernel", "bmnet_flatten_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("output_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_dim_len").set_type("int")
    cur_inst.add_param("input_dim").set_type("int").set_c_array("input_dim_len")

    cur_inst = tg.add_inst("bmnet_normalize_forward_bmkernel", "bmnet_normalize_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddr").set_type("gaddr_t")
    cur_inst.add_param("output_gaddr").set_type("gaddr_t")
    cur_inst.add_param("has_scale_blob").set_type("bool")
    cur_inst.add_param("scale_gaddr").set_type("gaddr_t")
    cur_inst.add_param("across_spatial").set_type("bool")
    cur_inst.add_param("channel_shared").set_type("bool")
    cur_inst.add_param("eps").set_type("float")
    cur_inst.add_param("scales").set_type("float").set_c_array("input_c")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")

    cur_inst = tg.add_inst("bmnet_deconv_forward_bmkernel", "bmnet_deconv_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("ga_ifmap").set_type("gaddr_t")
    cur_inst.add_param("ga_ofmap").set_type("gaddr_t")
    cur_inst.add_param("ga_weight").set_type("gaddr_t")
    cur_inst.add_param("ga_bias").set_type("gaddr_t")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")
    cur_inst.add_param("groups").set_type("int")
    cur_inst.add_param("output_c").set_type("int")
    cur_inst.add_param("output_h").set_type("int")
    cur_inst.add_param("output_w").set_type("int")
    cur_inst.add_param("kh").set_type("int")
    cur_inst.add_param("kw").set_type("int")
    cur_inst.add_param("dh").set_type("int")
    cur_inst.add_param("dw").set_type("int")
    cur_inst.add_param("pad_h").set_type("int")
    cur_inst.add_param("pad_w").set_type("int")
    cur_inst.add_param("stride_h").set_type("int")
    cur_inst.add_param("stride_w").set_type("int")
    cur_inst.add_param("using_bias").set_type("bool")
    cur_inst.add_param("result_add").set_type("bool")
    cur_inst.add_param("do_relu").set_type("bool")


    cur_inst = tg.add_inst("bmnet_stack_forward_bmkernel", "bmnet_stack_forward_bmkernel_short").add_ctx()
    cur_inst.add_param("input_gaddrs").set_type("gaddr_t").set_c_array("input_size")
    cur_inst.add_param("output_gaddr").set_type("gaddr_t")
    cur_inst.add_param("input_size").set_type("int")
    cur_inst.add_param("input_n").set_type("int")
    cur_inst.add_param("input_c").set_type("int")
    cur_inst.add_param("input_h").set_type("int")
    cur_inst.add_param("input_w").set_type("int")
    cur_inst.add_param("axis").set_type("int")
    return tg



def main():
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument("--api", required=True)
    parser.add_argument("--proto", required=True)
    args = parser.parse_args()

    templateLoader = jinja2.FileSystemLoader(searchpath="./")
    templateEnv = jinja2.Environment(
        loader=templateLoader, trim_blocks=True, lstrip_blocks=True)

    tg = get_tg()
    template = templateEnv.get_template("bmkernel_api.h.in")
    outputText = template.render(tg=tg)
    with open(args.api, 'w') as f:
        f.write(outputText)

    template = templateEnv.get_template("asm.proto.in")
    outputText = template.render(tg=tg)
    with open(args.proto, 'w') as f:
        f.write(outputText)


if __name__ == "__main__":
    main()
